---
- name: Create each directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0644
  with_list:
    - /etc/cni/net.d
    - /etc/containerd
    - /opt/cni/bin
    - /var/lib/kubelet
    - /var/lib/kubernetes

- name: Copy key to /var/lib/kubelet
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubelet/
    mode: 0644
  with_list:
    - ../../../files/{{ hostname }}.pem
    - ../../../files/{{ hostname }}-key.pem

- name: Copy configuration to /var/lib/kubelet/kubeconfig
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubelet/kubeconfig
    mode: 0644
  with_list:
    - ../../../files/{{ hostname }}.kubeconfig

- name: Copy certification to /var/lib/kubernetes
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubernetes/
    mode: 0644
  with_list:
    - ../../../files/kubernetes-ca.pem

# kubelet
- name: Check if a kubelet exists
  stat:
    path: /usr/local/bin/kubelet
  register: kubelet_register

- name: Download kubelet
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubernetes_version }}/bin/linux/{{ arch }}64/kubelet
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  when: not kubelet_register.stat.exists

# containerd
- name: Check if a crictl exists
  stat:
    path: /usr/local/bin/crictl
  register: crictl_register

- name: Download crictl
  unarchive:
    src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ crictl_version }}/crictl-v{{ crictl_version }}-linux-{{ arch }}64.tar.gz
    dest: /usr/local/bin/
    remote_src: True
    mode: 0755
    owner: root
    group: root
  when: not crictl_register.stat.exists

- name: Download cni plugins
  unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v{{ cni_plugins_version }}/cni-plugins-linux-{{ arch }}64-v{{ cni_plugins_version }}.tgz
    dest: /opt/cni/bin/
    remote_src: True
    mode: 0755
    owner: root
    group: root
  when: not crictl_register.stat.exists

- name: Install containerd & runc
  apt:
    update_cache: "yes"
    name:
      - containerd
      - runc

- name: Configure 10-bridge.conf
  template:
    src: "{{ item }}"
    dest: /etc/cni/net.d/10-bridge.conf
  with_list:
    - 10-bridge.conf.j2

- name: Copy 99-loopback.conf
  copy:
    src: "{{ item }}"
    dest: /etc/cni/net.d/
    force: yes
  with_list:
    - 99-loopback.conf

- name: Copy config.toml
  copy:
    src: "{{ item }}"
    dest: /etc/containerd/
    force: yes
  with_list:
    - config.toml

- name: Configure kubelet-config.yaml
  template:
    src: "{{ item }}"
    dest: /var/lib/kubelet/kubelet-config.yaml
    force: yes
  with_list:
    - kubelet-config.yaml.j2

- name: Copy kubelet.service
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    force: yes
  with_list:
    - kubelet.service

- name: Run kubelet service
  systemd:
    name: kubelet
    state: restarted
    enabled: true
    daemon_reload: true
  register: result

- name: Gather service
  service_facts:

- name: Verify kubelet service
  fail:
    msg: 'kubelet is not running!!!'
  when: ansible_facts["services"]["kubelet.service"].state != "running"
